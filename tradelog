#!/bin/bash
# ------------------------------------------------------------------
# Pavel Kratochvil    IOS 1. projekt
#
#          Filtration and sorting oriented stock logs analysis tool
# ------------------------------------------------------------------

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

# LIST OF VARIABLES
date_time_after=""
date_time_before="9999-12-31 24:59:59"
ticker=""
filter=0
after_dt=""
before_dt=""
ticker=""
width=-1
set_width=0
COMMANDS=""
LOG_FILES=""
GZ_LOG_FILES=""
LOGS=""

help() {
	echo "Usage: tradelog [-abtwh|--help] [FILTER] [COMMAND] [LOG [LOG2 [...]]"
  echo ""
  echo "COMMANDS"
  echo "    list-tick     get all unique tickers from a given file"
  echo "    profit        get total profit from closed positions"
  echo "    pos           "
  echo "    last-price    "
  echo "    hist-ord      "
  echo "    graph-pos     "
  echo ""
  echo "FILTERS (flags)"
  echo "    -a DATETIME       Format: YYYY-MM-DD HH:MM:SS only data AFTER given date time persist"
  echo "    -b DATETIME       Format: YYYY-MM-DD HH:MM:SS only data BEFORE given date time persist"
  echo "    -t TICKERS        Only logs containing given ticker are kept"
  echo "    -w WIDTH          Set maximum width for graph-pos and hist-ord commands"
  echo ""
  echo "    -h | --help       Display this message and exit"

}



list_tick() {
  echo "$LOGS" | awk -F ';' '{ print $2 }' | sort -u
}

profit() {
  buy_value=0.0
  sell_value=0.0
  buy_value=`echo "$LOGS" | awk -F ';' 'BEGIN{sum=0.0} $3 ~ /buy/ {sum += $4*$6} END {OFMT="%.2f";print sum}' | bc`
  sell_value=`echo "$LOGS" | awk -F ';' 'BEGIN{sum=0.0} $3 ~ /sell/ {sum += $4*$6} END {OFMT="%.2f";print sum}' | bc`
  echo "`echo "$sell_value - $buy_value" | bc | awk '{printf "%.2f", $0}'`"
}

pos() {
  echo "$LOGS" | awk -F ';' '
  BEGIN{}
  {
    dic_last_prices[$2]=$4;
  }
  {
    if ($3 == "buy") {
      number_of_shares[$2]+=$6;
    } else {
      number_of_shares[$2]-=$6;
    }
  }
  END{
    max_length=0;
    for (i in dic_last_prices) {
      total_value=dic_last_prices[i]*number_of_shares[i]

      if (length(int(total_value)) > max_length){
        max_length=length(int(total_value));
      }
    }
    for (i in dic_last_prices) {
      total_value=dic_last_prices[i]*number_of_shares[i];
      padding="";
      space=" ";
      for (counter=0; counter < max_length-length(int(total_value)); counter++) {
        padding=padding space
      }
      printf "%-10s: %s%.2f\n", i, padding, total_value;
    }
  }' | sort -k3 -nr
}

last_price() {
  echo "$LOGS" | awk -F ';' '
  BEGIN{}
  {
    dic_last_prices[$2]=$4;
  }
  END{
    max_length=0;
    for (i in dic_last_prices) {
      if (length(int(dic_last_prices[i])) > max_length){
        max_length=length(int(dic_last_prices[i]));
      }
    }
    for (i in dic_last_prices) {
      padding="";
      space=" ";
      for (counter=0; counter < max_length-length(int(dic_last_prices[i])); counter++) {
        padding=padding space
      }
      printf "%-10s: %s%.2f\n", i, padding, dic_last_prices[i]
    }
  }' | sort
}

hist_ord() {
  echo "$LOGS" | awk -F ';' -v width="$width" '
    BEGIN{
      max_transaction_number=0
    } 
    {
      transaction_counter[$2]+=1;
    }
    END{
      for (i in transaction_counter) {
        if (int(transaction_counter[i]) > max_transaction_number) {
          max_transaction_number = int(transaction_counter[i]);
        }
      }
      for (i in transaction_counter) {
        printf "%-10s: ", i;
        if (width == -1) {
          for (counter=0; counter < transaction_counter[i]; counter++) {
            printf "#";
          }
        } else {
          no_of_symbols=int(transaction_counter[i]*width/max_transaction_number);
          for (counter=0; counter < int(no_of_symbols); counter++) {
            printf "#";
          }
        }
        printf "\n";
      }
    }' | sort
}

graph_pos() {
    echo "$LOGS" | awk -F ';' -v width="$width" '
    function abs(v) {return v < 0 ? -v : v};
    BEGIN{}
    {
      dic_last_prices[$2]=$4;
    }
    {
      if ($3 == "buy") {
        number_of_shares[$2]+=$6;
      } else {
        number_of_shares[$2]-=$6;
      }
    }
    END{
      max_value=1000;
      if (width != -1) {
        max_value=0;
        for (i in dic_last_prices) {
          total_value=dic_last_prices[i]*number_of_shares[i];
          if (abs(total_value) > max_value) {
            max_value=abs(total_value);
          }
        }
      }

      for (i in dic_last_prices) {
        total_value=dic_last_prices[i]*number_of_shares[i];
        no_of_symbols=int(abs(total_value)*width/max_value);

        symbols=""
        excl="!"
        hasht="#"
        if (total_value < 0) {
          for (x=0; x < no_of_symbols; x++) {
            symbols=symbols excl
          }
        } else {
          for (x=0; x < no_of_symbols; x++) {
            symbols=symbols hasht
          }
        }
        if (length(symbols) > 0) {
          printf "%-10s: %s\n", i, symbols;
        } else {
          printf "%-10s:\n", i;
        }
      }
    }' | sort
}

save_file() {
  if [ `echo $file | grep "\.gz"` ]; then
    if [ -z "$LOGS" ]; then
      LOGS="`gzip -d -c $file`"
    else  
      LOGS="$LOGS\n`gzip -d -c $file`"
    fi
  elif [ `echo $file | grep "\.log"` ]; then
    if [ -z "$LOGS" ]; then
      LOGS="`cat $file`"
    else
      LOGS="$LOGS\n`cat $file`"
    fi
  else
    exit 1
  fi
}

filter_logs() {
  IFS='\n'
  if [ "$LOGS" != "" ]; then
    if [ $filter -ne 0 ]; then
      if [ -n "$tickers" ]; then
        LOGS=`echo "$LOGS" | awk -F ";" -v tickers="$tickers" '
        BEGIN{split(tickers, tic, " ")}
        {
          for (i in tic) {
            if ($2 == tic[i]) {
              print $0;
            }
          }
        }
        '`
      fi
      if [ -n "$date_time_after" ]; then
        LOGS=`echo $LOGS | awk -F ';' -v a="$date_time_after" '$1 > a {print $0}'`
      fi
      if [ "$date_time_before" != "9999-12-31 24:60:59" ]; then
        LOGS=`echo $LOGS | awk -F ';' -v b="$date_time_before" '$1 < b {print $0}'`
      fi
    fi
  fi
}

launch_command() {
  for command in $COMMANDS; do
    case "$command" in list-tick)
      list_tick;;
    esac
    case "$command" in profit)
      profit;;
    esac
    case "$command" in pos)
      pos;;
    esac
    case "$command" in last-price)
      last_price;;
    esac
    case "$command" in hist-ord)
      hist_ord;;
    esac
    case "$command" in graph-pos)
      graph_pos;;
    esac
  done

}

if [ "$1" = "--help" ]; then
    help
    shift
else
  while [ "$#" -gt 0 ]; do
    case "$1" in list-tick | profit | pos | last-price | hist-ord | graph-pos)
      COMMANDS="$1";
      shift;
      ;;
    -h) 
      help
      exit 0
      ;;
    -a)
      date_time_after="$2"
      filter=1
      shift
      shift
      ;;
    -b)
      date_time_before="$2"
      filter=1
      shift
      shift
      ;;
    -t)
      if [ -z $tickers ]; then
        tickers="$2"
      else
        tickers="$tickers $2"
      fi
      filter=1
      shift
      shift
      ;;
    -w) width="$2"
      if [ $set_width -ne 0 ]; then
        exit 1
      fi
      set_width=1
      shift
      shift
      ;;
    *)
      file="$1"
      save_file
      shift
    esac
  done
fi

filter_logs
launch_command

if [ -z "$COMMANDS" ] && [ "$filter" -eq 0 ]; then
  end=0
  while [ "$end" -eq 0 ]; do
    read line
    if [ "$line" = "" ]; then
      end=1
    else
      echo "$line"
    fi
  done
elif [ -z "$COMMANDS" ]; then
  echo "$LOGS"
fi

# TODO: primy vstup z catu